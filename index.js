// Generated by CoffeeScript 1.4.0
(function() {
  var buffer_request;

  exports.Block = (function() {

    function Block(def, handler) {
      if (typeof def === "function") {
        this.def = {};
        def.apply(this);
      } else {
        this.def = def || {};
        this.handlerFn = handler;
      }
    }

    Block.prototype.name = function(name) {
      this.def.name = name;
      return this;
    };

    Block.prototype.description = function(description) {
      this.def.description = description;
      return this;
    };

    Block.prototype.input = function() {
      return this._io("inputs", arguments);
    };

    Block.prototype.output = function() {
      return this._io("outputs", arguments);
    };

    Block.prototype._io = function(type, args) {
      if (!this.def[type]) {
        this.def[type] = [];
      }
      if (typeof args[0] === "object") {
        this.def[type].push(args[0]);
      } else {
        this.def[type].push({
          name: args[0],
          type: args[1],
          description: args[2]
        });
      }
      return this;
    };

    Block.prototype.handle = function(handler) {
      this.handlerFn = handler;
      return this;
    };

    Block.prototype._validateInputs = function(inputs) {
      var errors, input, value, _i, _len, _ref;
      errors = [];
      _ref = this.def.inputs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        value = inputs[input.name];
        if (!(value != null) && input.required !== false) {
          errors.push("Input '" + input.name + "' is required.");
        }
        if ((value != null) && typeof value !== input.type) {
          errors.push("Input '" + input.name + "' must be a " + input.type + ".");
        }
      }
      if (errors.length !== 0) {
        throw errors.join("\n");
      }
    };

    Block.prototype._handleRequest = function(request, callback) {
      var done, inputs;
      inputs = request.inputs[0];
      this._validateInputs(inputs);
      done = function(err, outputs) {
        if (!Array.isArray(outputs)) {
          outputs = [outputs];
        }
        return callback(err, {
          outputs: outputs
        });
      };
      if (this.handlerFn.length < 2) {
        try {
          return done(null, this.handlerFn(inputs));
        } catch (err) {
          return done(err);
        }
      } else {
        return this.handlerFn(inputs, done);
      }
    };

    Block.prototype.nodeHandler = function() {
      var _this = this;
      return function(req, res) {
        return _this._nodeHandler(req, res);
      };
    };

    Block.prototype._nodeHandler = function(req, res) {
      var _this = this;
      switch (req.method.toUpperCase()) {
        case "OPTIONS":
          res.writeHead(200, "OK", {
            "Content-Type": "application/json; charset=utf-8",
            "Access-Control-Allow-Headers": "Content-Type",
            "Access-Control-Allow-Methods": "OPTIONS,POST",
            "Access-Control-Allow-Origin": "*"
          });
          return res.end(JSON.stringify(this.def, null, 2));
        case "POST":
          return buffer_request(req, function(err, body) {
            var request;
            try {
              if (err) {
                throw err;
              }
              request = JSON.parse(body);
              return _this._handleRequest(request, function(err, response) {
                if (err) {
                  res.writeHead(500, "Internal Server Error");
                  return res.end();
                } else {
                  res.writeHead(200, "OK", {
                    "Content-Type": "application/json; charset=utf-8"
                  });
                  return res.end(JSON.stringify(response, null, 2));
                }
              });
            } catch (err) {
              res.writeHead(400, "Bad Request");
              return res.end(String(err));
            }
          });
        default:
          res.writeHead(405, "Method Not Allowed");
          return res.end();
      }
    };

    Block.prototype.listen = function(port) {
      var _ref;
      port = (_ref = port != null ? port : process.env.PORT) != null ? _ref : 3000;
      console.log("Starting '" + this.def.name + "' WebPipe block on port " + port);
      return require("http").createServer(this.nodeHandler()).listen(port);
    };

    return Block;

  })();

  buffer_request = function(req, callback) {
    var buffer;
    buffer = "";
    req.setEncoding("utf-8");
    req.on("error", function(err) {
      return callback(err);
    });
    req.on("data", function(data) {
      return buffer += data;
    });
    return req.on("end", function() {
      return callback(null, buffer);
    });
  };

}).call(this);
